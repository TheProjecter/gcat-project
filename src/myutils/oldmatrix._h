#ifndef _MATRIX_H_
#define _MATRIX_H_

#include <stdlib.h>
#include <stdio.h>

namespace myutils
{
template <typename T>
class Matrix
{
public:
	/*Preserve public access for back-compatibility*/
	T **element;

protected:
	int protected_nrows;
	int protected_ncols;
	int initialized;

public:
	/*Default constructor*/	Matrix()
	{
		initialized=0;
		initialize(0,0);
	}
	/*Constructor*/			Matrix(int nrows, int ncols)
	{
		initialize(nrows,ncols);
	}
	/*Constructor*/			Matrix(int nrows, int ncols, T value)
	{
		initialize(nrows,ncols);
		int i,j;
		for(i=0;i<nrows;i++)
			for(j=0;j<ncols;j++)
				element[i][j]=value;
	}
	/*Destructor*/			~Matrix()
	{
		int i;
		for(i=protected_nrows-1;i>=0;i--) delete[] element[i];
		delete[] element;
	}
	Matrix<T>& initialize(int nrows, int ncols)
	{
		element=new T*[nrows];
		if (!element) error("row allocation failure in Matrix::initialize()");

		int i;
		for(i=0;i<nrows;i++)
		{
			element[i]=new T[ncols];
			if (!element[i]) error("column allocation failure in Matrix::initialize()");
		}
		protected_nrows=nrows;
		protected_ncols=ncols;
		initialized=1;
		return *this;
	}
	/*All current data is lost when the Matrix is resized*/
	Matrix<T>& resize(int nrows, int ncols)
	{
		int i;
		if (!initialized) return initialize(nrows,ncols);
		if((nrows==protected_nrows)&&(ncols==protected_ncols))return *this;
		for(i=protected_nrows-1;i>=0;i--) delete[] element[i];
		delete[] element;

		element=new T*[nrows];
		if (!element) error("row allocation failure in Matrix::resize()");

		for(i=0;i<nrows;i++)
		{
			element[i]=new T[ncols];
			if (!element[i]) error("column allocation failure in Matrix::resize()");
		}
		
		/*Set these to the smaller of the two*/
/*		int maxrow = (nrows>protected_nrows ? protected_nrows : nrows);
		int maxcol = (ncols>protected_ncols ? protected_ncols : ncols);

		for(i=0;i<maxrow;i++)
			for(j=0;j<maxcol;j++)
				new_element[i][j]=element[i][j];
		
		element = new_element;*/
		protected_nrows=nrows;
		protected_ncols=ncols;
		return *this;
	}
	int nrows(){return protected_nrows;}
	int ncols(){return protected_ncols;}
	int nrows() const {return protected_nrows;}
	int ncols() const {return protected_ncols;}
	void error(char* error_text)
	{
		printf("Run-time error in Matrix::");
		printf("%s%\n", error_text);
		printf("Exiting to system...\n");
		exit(13);
	}
	/*Copy constructor*/	Matrix(const Matrix<T> &mat)
	/*	Copy constructor for the following cases:
			Matrix mat2(mat);
			Matrix mat2=mat;
		and when Matrix is returned from a function	*/
	{
		initialize(mat.protected_nrows,mat.protected_ncols);
		int i,j;
		for(i=0;i<protected_nrows;i++)
		{
			for(j=0;j<protected_ncols;j++)
			{
				element[i][j]=mat.element[i][j];
			}
		}
	}
	/*Assignment operator*/	Matrix<T>& operator=(const Matrix<T>& mat)
	{
		//if(this==mat)return *this;
		resize(mat.nrows(),mat.ncols());
		int i,j;
		for(i=0;i<protected_nrows;i++)
		{
			for(j=0;j<protected_ncols;j++)
			{
				element[i][j]=mat.element[i][j];
			}
		}
		return *this;
	}
	/*Subscript operator*/inline T* operator[](int pos){return element[pos];};
};
};

#endif